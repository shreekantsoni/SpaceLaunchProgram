{"version":3,"sources":["Api.jsx","serviceWorker.js","index.js"],"names":["URL","Api","state","post","allPosts","_onKeyUp","e","filter","item","mission_name","toLowerCase","includes","target","value","setState","_filterByYear","year","launch_year","_filterByLaunch","launch","launch_success","_filterByLanding","landing","launch_landing","axios","get","headers","Accept","then","data","catch","err","className","class","onClick","this","map","index","src","links","mission_patch_small","alt","mission_id","length","id","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b99dd441.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport './Api.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'; \r\n// URL = \"https://api.spaceXdata.com/v3/launches?limit=100&amp;launch_success=true\"; \r\nURL = \"https://api.spacexdata.com/v3/launches?limit=100\"; \r\n\r\nclass Api extends React.Component {\r\nstate = { \r\npost: [],\r\nallPosts: []\r\n};\r\ncomponentDidMount() {\r\naxios\r\n.get(URL, {\r\nheaders: {\r\nAccept: \"application/json\",\r\n\"Content-Type\": \"application/json\"\r\n}\r\n})\r\n.then(({ data }) => {\r\nthis.setState({\r\npost: data,\r\nallPosts: data // array data from JSON stored in these\r\n});\r\n})\r\n.catch(err => {});\r\n}\r\n_onKeyUp = e => {\r\n// filter post list by title using onKeyUp function\r\nconst post = this.state.allPosts.filter(item =>\r\nitem.mission_name.toLowerCase().includes(e.target.value.toLowerCase())\r\n);\r\nthis.setState({ post });\r\n};\r\n_filterByYear = year => {\r\nconst post = this.state.allPosts.filter(item =>\r\nitem.launch_year === year\r\n);\r\nthis.setState({ post });\r\n}\r\n\r\n_filterByLaunch = launch => {\r\n\tconst post = this.state.allPosts.filter(item =>\r\n\titem.launch_success === launch\r\n\t);\r\n\tthis.setState({ post });\r\n\t}\r\n\r\n\t_filterByLanding = landing => {\r\n\t\tconst post = this.state.allPosts.filter(item =>\r\n\t\titem.launch_landing === landing\r\n\t\t);\r\n\t\tthis.setState({ post });\r\n\t\t}\r\nrender() {\r\nreturn (\r\n<div className=\"container-fluid\">\r\n\r\n <header>\r\n  <h2>SpaceXLaunchPrograms</h2>\r\n </header>\r\n <section>\r\n        <nav>\r\n\t\t\t\r\n\t\r\n    <ul>\r\n\t\r\n\t  <h1>Filters</h1>\r\n    <p><u>Launch Year</u></p>\r\n\t\r\n\t  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n    <button class=\"btn btn-success m-1\"  onClick={() => this._filterByYear('2006')}>2006</button>\r\n    <button class=\"btn btn-success\"  onClick={() => this._filterByYear('2007')}>2007</button>\r\n    \r\n  </div>\r\n  </div>\r\n  \r\n  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n    <button class=\"btn btn-success m-1\"  onClick={() => this._filterByYear('2008')}>2008</button>\r\n    <button class=\"btn btn-success\"  onClick={() => this._filterByYear('2009')}>2009</button>\r\n    \r\n  </div>\r\n  </div>\r\n  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n    <button class=\"btn btn-success m-1\"  onClick={() => this._filterByYear('2010')}>2010</button>\r\n    <button class=\"btn btn-success\"  onClick={() => this._filterByYear('2011')}>2011</button>\r\n    \r\n  </div>\r\n  </div>\r\n  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n    <button class=\"btn btn-success m-1\"  onClick={() => this._filterByYear('2012')}>2012</button>\r\n    <button class=\"btn btn-success\"  onClick={() => this._filterByYear('2013')}>2013</button>\r\n    \r\n  </div>\r\n  </div>\r\n  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n    <button class=\"btn btn-success m-1\"  onClick={() => this._filterByYear('2014')}>2014</button>\r\n    <button class=\"btn btn-success\"  onClick={() => this._filterByYear('2015')}>2015</button>\r\n    \r\n  </div>\r\n  </div>\r\n  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n    <button class=\"btn btn-success m-1\"  onClick={() => this._filterByYear('2016')}>2016</button>\r\n    <button class=\"btn btn-success\"  onClick={() => this._filterByYear('2017')}>2017</button>\r\n    \r\n  </div>\r\n  </div>\r\n  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n    <button class=\"btn btn-success m-1\"  onClick={() => this._filterByYear('2018')}>2018</button>\r\n    <button class=\"btn btn-success\"  onClick={() => this._filterByYear('2019')}>2019</button>\r\n    \r\n  </div>\r\n  </div>\r\n  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n    <button class=\"btn btn-success m-1\"  onClick={() => this._filterByYear('2020')}>2020</button>\r\n    \r\n    \r\n  </div>\r\n  </div>\r\n  <br/>\r\n  <p><u>Successful Launch</u></p>\r\n    \r\n\t  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n  <button class=\"btn btn-success m-1\"  onClick={() => this._filterByLaunch(true)}>true</button>\r\n  <button class=\"btn btn-success\"  onClick={() => this._filterByLaunch(false)}>false</button>\r\n    \r\n    \r\n  </div>\r\n  </div>\r\n  <br/>\r\n  <p><u>Successful Landing</u></p>\r\n    \r\n\t  <div class=\"w3-show-inline-block\">\r\n  <div class=\"w3-bar\">\r\n  <button class=\"btn btn-success m-1\"  >true</button>\r\n  <button class=\"btn btn-success\"  >false</button>\r\n    \r\n  </div>\r\n  </div>\r\n       </ul>\r\n  </nav>\r\n           <article>\r\n\t\t   <ul className=\"data-list\">\r\n{/* post items mapped in a list linked to onKeyUp function */}\r\n{this.state.post.map((item, index) => (\r\n<li className={\"block-\" + index}>\r\n<div className=\"title\">\r\n<img src={item.links.mission_patch_small} alt=\"Images\"/>\r\n<h3>{item.mission_name}</h3>\r\n<h5>Mission Ids: {item.mission_id.length === 0 ? \"0\" : item.mission_id.map((id, index) => <span key={index}>{ (index ? ', ' : '') + id }</span>)}</h5>\r\n<h5>Launch Year: {item.launch_year}</h5>\r\n<h5>Successful Launch: {item.launch_success ? \"True\" : \"False\"}</h5>\r\n<h5>Successful Landing: {item.launch_landing ? \"launch_landing\" : \"launch_landing\"}</h5>\r\n</div>\r\n</li>\r\n))}\r\n</ul> </article>\r\n</section>\r\n        \r\n\r\n\r\n</div>\r\n);\r\n}\r\n}\r\nexport default Api;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\n//import App2 from './App2';\n//import App3 from './App3';\n//import SForm from './SForm';\n//import Todo from './todo';\n//import NoteApp from './NoteApp';\nimport Api from './Api';\n//import UseEffect from './UseEffect';\n//import Router from './Router';\n//import R from './Router/R'\n//import App5 from './Animated/App5'\n//import SForm2 from './SForm2';\n// import HandelEvent from './HandelEvent';\n//import Demo from './Demo' ;\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Api/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}